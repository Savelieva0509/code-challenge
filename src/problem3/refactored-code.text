import React, { useMemo } from 'react';
import { BoxProps } from '@material-ui/core/Box'; // Assuming BoxProps is from Material-UI
import { useWalletBalances, usePrices } from 'your-hooks'; // Replace with actual import paths
import WalletRow from './WalletRow'; // Replace with actual import path

interface WalletBalance {
  currency: string;
  amount: number;
  blockchain: string; // Added blockchain to WalletBalance
}

interface FormattedWalletBalance {
  currency: string;
  amount: number;
  formatted: string;
}

interface Props extends BoxProps {}

const WalletPage: React.FC<Props> = (props: Props) => {
  const { children, ...rest } = props;
  const balances = useWalletBalances();
  const prices = usePrices();

  const getPriority = useMemo(() => {
    const priorities: Record<string, number> = {
      Osmosis: 100,
      Ethereum: 50,
      Arbitrum: 30,
      Zilliqa: 20,
      Neo: 20,
    };
    return (blockchain: string): number => priorities[blockchain] || -99;
  }, []);

  const formattedBalances = useMemo(() => {
    return balances
      .filter((balance) => {
        const priority = getPriority(balance.blockchain);
        return priority > -99 && balance.amount > 0;
      })
      .sort((lhs, rhs) => {
        const leftPriority = getPriority(lhs.blockchain);
        const rightPriority = getPriority(rhs.blockchain);
        return rightPriority - leftPriority; // Sort in descending order
      })
      .map((balance) => ({
        ...balance,
        formatted: balance.amount.toFixed(2), // Specify decimal places
      }));
  }, [balances, getPriority]);

  const rows = useMemo(() => {
    return formattedBalances.map((balance) => {
      const usdValue = prices[balance.currency] * balance.amount;
      return (
        <WalletRow 
          className={classes.row}
          key={`${balance.currency}-${balance.amount}`} // Use unique identifier
          amount={balance.amount}
          usdValue={usdValue}
          formattedAmount={balance.formatted}
        />
      );
    });
  }, [formattedBalances, prices]);

  return (
    <div {...rest}>
      {rows}
    </div>
  );
}

export default WalletPage;
